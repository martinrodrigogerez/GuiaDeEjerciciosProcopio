classDiagram
%% ===================== SUSCRIPTORES / OBSERVER =====================
    class Suscriptor{
        <<interface>>
        +actualizar(Notificacion n)
    }

    class Publicador{
        <<interface>>
        +suscribir(Suscriptor s)
        +desuscribir(Suscriptor s)
        +notificar(Notificacion n)
    }

    class Notificacion{
        -tipo: TipoNotificacion
        -incidente: Incidente
        -detalle: String
        +Notificacion(TipoNotificacion tipo, Incidente inc, String detalle)
        +getTipo(): TipoNotificacion
        +getIncidente(): Incidente
        +getDetalle(): String
    }

    class TipoNotificacion{
        <<enumeration>>
        SEGUIMIENTO
        ALERTA
    }

    Notificacion --> TipoNotificacion
    Notificacion --> Incidente

%% ===================== ACTORES =====================
    class Trabajador{
        -nombre: String
        -denuncias: List~Incidente~
        +Trabajador(String nombre)
        +denunciar(Incidente nuevoIncidente)
        +actualizar(Notificacion n)
    }
    Trabajador --|> Suscriptor

    class Sindical{
        -nombre:String
        -accion: AccionStrategy
        +Sindical(String nombre)
        +setAccion(AccionStrategy a)
        +analizarRespuesta(Incidente i)
        +cambiarEstadoIncidente(Incidente i, Estado nuevo)
        +ejecutar(Incidente i)
        +actualizar(Notificacion n)
    }
    Sindical --|> Suscriptor
    Sindical --> AccionStrategy : usa
    Sindical ..> Notificacion : crea ALERTA

%% Trabajador gestiona sus incidentes
    Trabajador o-- Incidente : posee/denuncia

%% ===================== INCIDENTE (SUBJECT/STATE) =====================
    class Incidente{
        -fechayHoraIncidente: LocalDateTime
        -tipoDeViolencia: TipoDeViolencia
        -estado: Estado
        -respuestaDeLaEmpresa: List~String~
        -suscriptores: List~Suscriptor~
        +Incidente(String desc, TipoDeViolencia tipo, Estado estadoInicial)
        +cambiarEstado(Estado nuevoEstado)
        +suscribir(Suscriptor s)
        +desuscribir(Suscriptor s)
        +notificar(Notificacion n)
    }
    Incidente ..|> Publicador
    Incidente --> Estado
    Incidente --> TipoDeViolencia
    Incidente ..> Notificacion : crea SEGUIMIENTO

    class TipoDeViolencia{
        <<enumeration>>
        VERBAL
        FISICA
        PSICOLOGICA
    }

%% ===================== STATE =====================
    class Estado{
        <<interface>>
        +cambiar(Incidente i)
        +nombre(): String
    }
    Estado <|.. EnProgreso
    Estado <|.. SinRespuesta
    Estado <|.. ConRespuesta
    Estado <|.. Resuelto

    class EnProgreso{
        +cambiar(Incidente i)
        +nombre(): String
    }
    class SinRespuesta{
        +cambiar(Incidente i)
        +nombre(): String
    }
    class ConRespuesta{
        +cambiar(Incidente i)
        +nombre(): String
    }
    class Resuelto{
        +cambiar(Incidente i)
        +nombre(): String
    }

%% ===================== STRATEGY (ACCIONES) =====================
    class AccionStrategy{
        <<interface>>
        +ejecutar(Incidente i)
        +descripcion(): String
    }
    AccionStrategy <|.. ReunionDeMediacion
    AccionStrategy <|.. NegociarConLaEmpresa
    AccionStrategy <|.. Protesta

    class ReunionDeMediacion{
        +ejecutar(Incidente i)
        +descripcion(): String
    }
    class NegociarConLaEmpresa{
        +ejecutar(Incidente i)
        +descripcion(): String
    }
    class Protesta{
        +ejecutar(Incidente i)
        +descripcion(): String
    }

%% ===================== EMPRESA =====================
    class Empresa{
        -descripcion: String
        +Empresa(String descripcion)
        +responderIncidente(Incidente i, String respuesta)
    }
    Empresa ..> Incidente : responde
